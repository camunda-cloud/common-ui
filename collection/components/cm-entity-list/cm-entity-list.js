import{Component,Host,h,Prop,State,Element,Method}from"@stencil/core";export class CmEntityList{constructor(){this.enableCreateButton=!0,this.loading=!1,this.headline="",this.createButtonLabel="",this.createHandler=()=>{},this.columns=[],this.entities=[],this.groupOptions=[],this.addScrollPadding=!1,this.selectedEntities=[],this.isSearchOpen=!1,this.filter="",this.entitiesAreScrolled=!1}componentDidUpdate(){var _a;null===(_a=this.element.shadowRoot.querySelector("#searchInput"))||void 0===_a||_a.focus()}async triggerEntityOption(options){var _a;null===(_a=this.element.shadowRoot.querySelectorAll(".entity cm-dropdown").item(options.entityIndex))||void 0===_a||_a.triggerOptionByIndex(options.optionGroupIndex,options.optionIndex)}async triggerGroupOption(optionGroupIndex,optionIndex){var _a;null===(_a=this.element.shadowRoot.querySelector(".header cm-dropdown"))||void 0===_a||_a.triggerOptionByIndex(optionGroupIndex,optionIndex)}async selectAll(){this.selectedEntities=[...this.entities]}async deselectAll(){this.selectedEntities=[]}async selectIndex(index){let targetEntity=this.entities[index];this.selectedEntities.includes(targetEntity)||(this.selectedEntities=[...this.selectedEntities,targetEntity])}async deselectIndex(index){let targetEntity=this.entities[index];if(this.selectedEntities.includes(targetEntity)){let selectedEntityIndex=this.selectedEntities.indexOf(targetEntity),newEntities=this.selectedEntities.slice(0);newEntities.splice(selectedEntityIndex,1),this.selectedEntities=newEntities}}render(){let loader,entities,columnHeaderIcon,groupDropdown,search;for(let i=0;i<this.selectedEntities.length;i++){let entity=this.selectedEntities[i];this.entities.includes(entity)||(this.selectedEntities.splice(i,1),i--)}let gridTemplateColumns="";gridTemplateColumns=this.groupOptions.length?`25px ${this.columns.map((column=>column.width)).join(" ")}`:this.columns.map((column=>column.width)).join(" ");let sortedEntities=this.entities.slice(0),sorting=null;this.userSelectedSorting?sorting=this.userSelectedSorting:this.defaultSorting&&(sorting=this.defaultSorting),null!==sorting&&(sortedEntities.sort(((a,b)=>{const leftValue=a.data[sorting.columnIndex],rightValue=b.data[sorting.columnIndex];return"text"===leftValue.type&&"text"===rightValue.type?"ascending"===sorting.method?leftValue.content.localeCompare(rightValue.content):rightValue.content.localeCompare(leftValue.content):0})),columnHeaderIcon="ascending"===sorting.method?h("cm-icon",{icon:"up"}):h("cm-icon",{icon:"down"}));const createSortingToggle=index=>()=>{var _a,_b;(null===(_a=this.userSelectedSorting)||void 0===_a?void 0:_a.columnIndex)===index?"ascending"===this.userSelectedSorting.method?this.userSelectedSorting={columnIndex:index,method:"descending"}:this.userSelectedSorting={columnIndex:index,method:"ascending"}:(null===(_b=this.defaultSorting)||void 0===_b?void 0:_b.columnIndex)===index&&"ascending"===this.defaultSorting.method?this.userSelectedSorting={columnIndex:index,method:"descending"}:this.userSelectedSorting={columnIndex:index,method:"ascending"}};let filteredEntities=sortedEntities;if(this.filter.length&&(filteredEntities=filteredEntities.filter((entity=>{for(let data of entity.data)if("text"===data.type&&data.content.toLocaleLowerCase().includes(this.filter.toLocaleLowerCase()))return!0;return!1}))),this.loading&&(loader=h("div",{class:"loader",style:{zIndex:(filteredEntities.length+1).toString()}},h("cm-loader",{size:"normal"}))),entities=filteredEntities.map(((entity,index)=>{let entityClasses={entity:!0,selected:this.selectedEntities.includes(entity),hasPress:"function"==typeof entity.onPress};return h("div",{class:entityClasses,style:{gridTemplateColumns,cursor:entity.onPress?"pointer":"default",zIndex:(filteredEntities.length-index).toString()},onClick:entity.onPress},this.groupOptions.length?h("div",{class:"cell"},h("cm-checkbox",{class:{visible:this.selectedEntities.length>0},onClick:event=>{event.preventDefault(),event.stopPropagation()},checked:this.selectedEntities.includes(entity),onCmInput:()=>{if(this.selectedEntities.includes(entity)){let index=this.selectedEntities.indexOf(entity),newEntities=this.selectedEntities.slice(0);newEntities.splice(index,1),this.selectedEntities=newEntities}else this.selectedEntities=[...this.selectedEntities,entity]}})):"",entity.data.map(((item,index)=>{var _a,_b;let content,ellipsis,column=this.columns[index],itemCSS={},spanCSS={};return ellipsis=void 0===column.ellipsis||"off"==column.ellipsis?"off":column.ellipsis,"text"===item.type&&("left"===ellipsis&&(spanCSS={textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden",direction:"rtl"}),"right"===ellipsis&&(spanCSS={textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}),content=h("span",{style:spanCSS},item.content),item.showCopyButton&&(itemCSS=Object.assign(Object.assign(Object.assign({},itemCSS),"off"===ellipsis?{gridAutoColumns:"max-content"}:{gridAutoColumns:"minmax(0, min-content)"}),{gridAutoFlow:"column",gap:"10px"}))),"image"===item.type&&(content=h("img",{src:item.src})),"button"===item.type&&(itemCSS={gridAutoColumns:"max-content"},content=h("cm-button",{appearance:"link",label:item.label,onClick:event=>{event.preventDefault(),event.stopPropagation()},onCmPress:item.onPress})),"contextMenu"===item.type&&(content=h("cm-dropdown",{onClick:event=>{event.preventDefault(),event.stopPropagation()},trigger:{type:"icon",icon:"contextMenu"},options:item.options})),h("div",{class:"cell",style:Object.assign(Object.assign({},null!==(_b=null===(_a=this.columns[index])||void 0===_a?void 0:_a.overrideCSS)&&void 0!==_b?_b:{}),itemCSS)},content,"text"===item.type&&item.showCopyButton?h("cm-icon-button",{icon:"copy",onClick:event=>{event.preventDefault(),event.stopPropagation()},onCmPress:()=>{navigator.clipboard.writeText(item.content)}}):"")})))})),this.selectedEntities.length&&this.groupOptions.length){let label="";label=1===this.selectedEntities.length?"1 item selected":`${this.selectedEntities.length} items selected`,groupDropdown=h("cm-dropdown",{trigger:{type:"button",appearance:"primary",label},options:this.groupOptions.map((optionGroup=>(optionGroup.options.map((option=>{let originalHandler=option.handler;return option.handler=event=>{event.detail||(event.detail={}),event.detail.selectedEntities=this.selectedEntities,originalHandler(event)},option})),optionGroup)))})}search=this.isSearchOpen?h("div",{class:"search open"},h("input",{type:"text",id:"searchInput",placeholder:"Search",onInput:event=>{var _a;this.filter=null===(_a=event.target)||void 0===_a?void 0:_a.value}}),h("cm-icon-button",{icon:"closeLarge",onCmPress:()=>{this.filter="",this.isSearchOpen=!1}})):h("div",{class:"search"},h("cm-icon-button",{icon:"search",onCmPress:()=>{this.isSearchOpen=!0}}));let headerClasses={header:!0,entitiesAreScrolled:this.entitiesAreScrolled},entitiesClasses={entities:!0,scrollPadding:this.addScrollPadding};return h(Host,null,h("div",{class:"container"},h("div",{class:headerClasses},h("div",{class:"headline"},this.headline),h("div",{class:"buttons"},search,groupDropdown,h("cm-button",{disabled:!this.enableCreateButton||this.loading,appearance:this.selectedEntities.length?"secondary":"primary",label:this.createButtonLabel,onCmPress:this.createHandler})),this.entities.length?h("div",{class:"columnHeaders",style:{gridTemplateColumns}},this.groupOptions.length?h("cm-checkbox",{class:{visible:this.selectedEntities.length>0},checked:this.selectedEntities.length===this.entities.length,onCmInput:event=>{event.detail.isChecked?this.selectedEntities=[...this.entities]:this.selectedEntities=[]}}):"",this.columns.map((({name},index)=>h("div",{class:"columnHeader",onClick:name.length?createSortingToggle(index):()=>{}},h("span",null,name),(null==sorting?void 0:sorting.columnIndex)===index?columnHeaderIcon:""))),this.loading?h("div",{class:"loader"}):""):""),h("div",{class:entitiesClasses,onScroll:event=>{this.entitiesAreScrolled=0!==event.target.scrollTop}},h("div",{style:{display:this.entities.length||this.loading?"none":"grid"}},h("slot",{name:"empty"})),entities,loader)))}static get is(){return"cm-entity-list"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["cm-entity-list.scss"]}}static get styleUrls(){return{$:["cm-entity-list.css"]}}static get properties(){return{enableCreateButton:{type:"boolean",mutable:!0,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"enable-create-button",reflect:!1,defaultValue:"true"},loading:{type:"boolean",mutable:!0,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"loading",reflect:!1,defaultValue:"false"},headline:{type:"string",mutable:!0,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"headline",reflect:!1,defaultValue:"''"},createButtonLabel:{type:"string",mutable:!0,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"create-button-label",reflect:!1,defaultValue:"''"},createHandler:{type:"unknown",mutable:!0,complexType:{original:"() => void",resolved:"() => void",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},defaultValue:"() => {}"},columns:{type:"unknown",mutable:!0,complexType:{original:"Array<{\n\t\tname: string\n\t\twidth: string\n\t\tellipsis?: 'off' | 'left' | 'right'\n\t\toverrideCSS?: Record<string, string>\n\t}>",resolved:'{ name: string; width: string; ellipsis?: "left" | "right" | "off"; overrideCSS?: Record<string, string>; }[]',references:{Array:{location:"global"},Record:{location:"global"}}},required:!1,optional:!1,docs:{tags:[],text:""},defaultValue:"[]"},entities:{type:"unknown",mutable:!0,complexType:{original:"Array<Entity>",resolved:"Entity[]",references:{Array:{location:"global"},Entity:{location:"local"}}},required:!1,optional:!1,docs:{tags:[],text:""},defaultValue:"[]"},groupOptions:{type:"unknown",mutable:!0,complexType:{original:"Array<DropdownOptionGroup>",resolved:"DropdownOptionGroup[]",references:{Array:{location:"global"},DropdownOptionGroup:{location:"import",path:"../cm-dropdown/cm-dropdown"}}},required:!1,optional:!1,docs:{tags:[],text:""},defaultValue:"[]"},defaultSorting:{type:"unknown",mutable:!0,complexType:{original:"SortingDescription",resolved:'{ columnIndex: number; method: "ascending" | "descending"; }',references:{SortingDescription:{location:"local"}}},required:!1,optional:!0,docs:{tags:[],text:""}},addScrollPadding:{type:"boolean",mutable:!0,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!0,docs:{tags:[],text:""},attribute:"add-scroll-padding",reflect:!1,defaultValue:"false"}}}static get states(){return{userSelectedSorting:{},selectedEntities:{},isSearchOpen:{},filter:{},entitiesAreScrolled:{}}}static get methods(){return{triggerEntityOption:{complexType:{signature:"(options: { entityIndex: number; optionGroupIndex: number; optionIndex: number; }) => Promise<void>",parameters:[{tags:[],text:""}],references:{Promise:{location:"global"},NodeListOf:{location:"global"},HTMLCmDropdownElement:{location:"global"}},return:"Promise<void>"},docs:{text:"Triggers an option of entity at the given index as if selected by the user, if available. Note that the entity index is based of the entity array and ignores all sorting.",tags:[]}},triggerGroupOption:{complexType:{signature:"(optionGroupIndex: number, optionIndex: number) => Promise<void>",parameters:[{tags:[],text:""},{tags:[],text:""}],references:{Promise:{location:"global"},HTMLCmDropdownElement:{location:"global"}},return:"Promise<void>"},docs:{text:"Triggers an option of the group-actions-dropdown as if selected by the user, if available. Needs selected entities to function.",tags:[]}},selectAll:{complexType:{signature:"() => Promise<void>",parameters:[],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Selects all entities.",tags:[]}},deselectAll:{complexType:{signature:"() => Promise<void>",parameters:[],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"De-selects all entities.",tags:[]}},selectIndex:{complexType:{signature:"(index: number) => Promise<void>",parameters:[{tags:[],text:""}],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Selects the entity at the given index. Note that the index is based of the entity array and ignores all sorting.",tags:[]}},deselectIndex:{complexType:{signature:"(index: number) => Promise<void>",parameters:[{tags:[],text:""}],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"De-selects the entity at the given index. Note that the index is based of the entity array and ignores all sorting.",tags:[]}}}}static get elementRef(){return"element"}}