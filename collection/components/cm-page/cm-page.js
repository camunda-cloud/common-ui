import{Component,h,Element,Listen,Event,Method,Watch,Prop,Host,State}from"@stencil/core";export class CmPage{constructor(){this.isHeaderEmpty=!0,this.tabRefs=[],this.labelToTabMap={},this.labelToHandleMap={},this.labels=[]}activeTitleWatchHandler(newValue,oldValue){this.parseTabList(),this.labels.includes(newValue)?this.tabChanged.emit({label:newValue,tab:this.labelToTabMap[newValue],handle:this.labelToHandleMap[newValue]}):(console.error(`Active label not found! Refusing to update. Requested activeLabel: '${newValue}' Old activeLabel: '${oldValue}' All labels: '${this.labels}'`),this.labels.includes(oldValue)?this.activeLabel=oldValue:console.error(`Old label is not there anymore. Refusing to revert. Requested activeLabel: '${newValue}' Old activeLabel: '${oldValue}' All labels: '${this.labels}'`))}tabModifiedEventHandler(){this.parseTabList()}userSelectedTabHandler(event){const label=event.detail.label;this.switchToTab(label)}async getActiveState(){return{label:this.activeLabel,tab:this.labelToTabMap[this.activeLabel],handle:this.labelToHandleMap[this.activeLabel]}}async switchToTab(label){this.activeLabel=label}async switchToTabIndex(index){const label=this.labels[index];return this.switchToTab(label)}onChildrenChange(){this.parseTabList()}parseTabList(){this.tabRefs=Array.from(this.root.querySelectorAll("cm-page-tab")),this.labels=this.tabRefs.map((tabRef=>tabRef.label)),this.labelToTabMap={},this.tabRefs.forEach((tabRef=>{this.labelToTabMap[tabRef.label]=tabRef}))}componentDidRender(){requestAnimationFrame((()=>{let headerSlot=this.root.shadowRoot.querySelector("slot[name=header]");headerSlot&&(this.isHeaderEmpty=0===headerSlot.assignedElements().length)}))}componentDidLoad(){new MutationObserver(this.onChildrenChange.bind(this)).observe(this.root,{childList:!0});let headerSlot=this.root.shadowRoot.querySelector("slot[name=header]");headerSlot.addEventListener("slotchange",(()=>{this.isHeaderEmpty=0===headerSlot.assignedElements().length}))}async componentWillRender(){this.parseTabList(),!this.labels.includes(this.activeLabel)&&this.labels.length>0&&await this.switchToTabIndex(0),this.tabRefs.forEach((tabRef=>{tabRef.active=!1})),this.labelToTabMap.hasOwnProperty(this.activeLabel)&&(this.labelToTabMap[this.activeLabel].active=!0),this.labelToHandleMap={}}render(){let handlesClasses={handles:!0,empty:this.tabRefs.length<2},headerClasses={empty:this.isHeaderEmpty&&handlesClasses.empty};return h(Host,null,h("header",{class:headerClasses},h("div",{class:"headerSlot"},h("slot",{name:"header"})),h("div",{class:handlesClasses},this.tabRefs.map((tab=>h("cm-page-tab-handle",{key:tab.label,label:tab.label,active:this.activeLabel===tab.label,ref:elem=>this.labelToHandleMap[tab.label]=elem}))))),h("div",{class:"tabs"},h("slot",null)))}static get is(){return"cm-page"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["cm-page.scss"]}}static get styleUrls(){return{$:["cm-page.css"]}}static get properties(){return{activeLabel:{type:"string",mutable:!0,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"active-label",reflect:!0}}}static get states(){return{isHeaderEmpty:{}}}static get events(){return[{method:"tabChanged",name:"tabChanged",bubbles:!0,cancelable:!0,composed:!0,docs:{tags:[],text:"This is emitted when the active tab is changed."},complexType:{original:"ComponentState",resolved:"{ label: string; tab: HTMLCmPageTabElement; handle: HTMLCmPageTabHandleElement; }",references:{ComponentState:{location:"local"}}}}]}static get methods(){return{getActiveState:{complexType:{signature:"() => Promise<ComponentState>",parameters:[],references:{Promise:{location:"global"},ComponentState:{location:"local"}},return:"Promise<ComponentState>"},docs:{text:"Returns the currently active tab, handle, and title.",tags:[]}},switchToTab:{complexType:{signature:"(label: string) => Promise<void>",parameters:[{tags:[{text:"label Title of the target tab.",name:"param"}],text:"Title of the target tab."}],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Switches to a tab based on their label.",tags:[{name:"param",text:"label Title of the target tab."}]}},switchToTabIndex:{complexType:{signature:"(index: number) => Promise<void>",parameters:[{tags:[{text:"index Index of the target tab.",name:"param"}],text:"Index of the target tab."}],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Switches to a tab based on their index.",tags:[{name:"param",text:"index Index of the target tab."}]}}}}static get elementRef(){return"root"}static get watchers(){return[{propName:"activeLabel",methodName:"activeTitleWatchHandler"}]}static get listeners(){return[{name:"tabModified",method:"tabModifiedEventHandler",target:void 0,capture:!1,passive:!1},{name:"userSelectedTab",method:"userSelectedTabHandler",target:void 0,capture:!1,passive:!1}]}}