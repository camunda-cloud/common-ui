import{Component,Host,h,Prop,Method,State,Element,Listen}from"@stencil/core";const minimumWidth=250,maximumWidth=750;export class CmModal{constructor(){this.isOpen=!1,this.confirmLoading=!1,this.cancelDisabled=!1,this.position="center",this.width=636,this.paddings="all",this.headline="",this.confirmLabel="",this.confirmAppearance="primary",this.confirmDisabled=!1,this.cancelLabel="",this.cancelAppearance="secondary",this.submitFromConfirm=!1}handleKeyDown(event){"Escape"===event.key&&this.cancel()}async open(options={}){if(this.submitFromConfirm=!1,this.preConfirmationHandler=options.preConfirmationHandler,this.promise=new Promise((resolve=>{this.promiseResolver=resolve})),!options.preventFormReset){const form=this.element.querySelector("cm-form");null==form||form.reset(),null==form||form.addEventListener("cmSubmit",(()=>{this.submitFromConfirm||this.confirm()})),null==form||form.forceFocus()}return this.isOpen=!0,this.element.focus(),this.promise}async confirm(){if(this.isOpen){let formResult,form=this.element.querySelector("cm-form");if(form&&(this.submitFromConfirm=!0,formResult=await form.attemptSubmit(),this.submitFromConfirm=!1,!formResult.isValid))return this.promise;this.preConfirmationHandler?(this.confirmLoading=!0,this.cancelDisabled=!0,this.preConfirmationHandler().then((()=>{this.isOpen=!1,this.promiseResolver({result:"confirm",formData:null==formResult?void 0:formResult.data}),this.confirmLoading=!1,this.cancelDisabled=!1}),(()=>{this.confirmLoading=!1,this.cancelDisabled=!1}))):(this.isOpen=!1,this.promiseResolver({result:"confirm",formData:null==formResult?void 0:formResult.data}))}return this.promise}async cancel(){return this.isOpen&&(this.isOpen=!1,this.promiseResolver({result:"cancel"})),this.promise}render(){let classes={container:!0,open:this.isOpen,[this.position]:!0},boundedWidth=Math.max(Math.min(this.width,750),250);return h(Host,{tabindex:"0"},h("div",{class:classes},h("div",{class:"window",style:{width:`${boundedWidth}px`}},h("div",{class:"header"},h("h1",null,this.headline),h("cm-icon-button",{disabled:this.cancelDisabled,icon:"closeLarge",onCmPress:()=>this.cancel()})),h("div",{class:{content:!0,[`paddings-${this.paddings}`]:!0}},h("slot",null)),h("div",{class:"buttons"},""!==this.cancelLabel?h("cm-button",{disabled:this.cancelDisabled,appearance:this.cancelAppearance,label:this.cancelLabel,onCmPress:()=>this.cancel()}):"",h("cm-button",{appearance:this.confirmAppearance,label:this.confirmLabel,loading:this.confirmLoading,disabled:this.confirmDisabled,onCmPress:()=>this.confirm()})))))}static get is(){return"cm-modal"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["cm-modal.scss"]}}static get styleUrls(){return{$:["cm-modal.css"]}}static get properties(){return{position:{type:"string",mutable:!0,complexType:{original:"'top' | 'center'",resolved:'"center" | "top"',references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"position",reflect:!1,defaultValue:"'center'"},width:{type:"number",mutable:!0,complexType:{original:"number",resolved:"number",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"width",reflect:!1,defaultValue:"636"},paddings:{type:"string",mutable:!0,complexType:{original:"| 'all'\n\t\t| 'vertical'\n\t\t| 'horizontal'\n\t\t| 'none'",resolved:'"all" | "horizontal" | "none" | "vertical"',references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"paddings",reflect:!1,defaultValue:"'all'"},headline:{type:"string",mutable:!0,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"headline",reflect:!1,defaultValue:"''"},confirmLabel:{type:"string",mutable:!0,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"confirm-label",reflect:!1,defaultValue:"''"},confirmAppearance:{type:"string",mutable:!0,complexType:{original:"| 'primary'\n\t\t| 'danger'\n\t\t| 'secondary'",resolved:'"danger" | "primary" | "secondary"',references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"confirm-appearance",reflect:!1,defaultValue:"'primary'"},confirmDisabled:{type:"boolean",mutable:!0,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"confirm-disabled",reflect:!1,defaultValue:"false"},cancelLabel:{type:"string",mutable:!0,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"cancel-label",reflect:!1,defaultValue:"''"},cancelAppearance:{type:"string",mutable:!0,complexType:{original:"'secondary' | 'danger'",resolved:'"danger" | "secondary"',references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"cancel-appearance",reflect:!1,defaultValue:"'secondary'"}}}static get states(){return{isOpen:{},confirmLoading:{},cancelDisabled:{}}}static get methods(){return{open:{complexType:{signature:'(options?: { preConfirmationHandler?: () => Promise<void>; preventFormReset?: boolean; }) => Promise<{ result: "confirm"; formData?: Record<string, string>; } | { result: "cancel"; }>',parameters:[{tags:[],text:""}],references:{Promise:{location:"global"},Record:{location:"global"}},return:'Promise<{ result: "confirm"; formData?: Record<string, string>; } | { result: "cancel"; }>'},docs:{text:"Opens the modal. Takes an optional handler for asynchronous confirm actions, which only trigger confirm if the returned Promise resolves successfully. While the Promise is unresolved, the Modal stays open and the ConfirmButton is in a loading state.",tags:[]}},confirm:{complexType:{signature:'() => Promise<{ result: "confirm"; formData?: Record<string, string>; } | { result: "cancel"; }>',parameters:[],references:{Promise:{location:"global"},Record:{location:"global"}},return:'Promise<{ result: "confirm"; formData?: Record<string, string>; } | { result: "cancel"; }>'},docs:{text:"Triggers the 'confirm' action on the modal, if it is open.",tags:[]}},cancel:{complexType:{signature:'() => Promise<{ result: "confirm"; formData?: Record<string, string>; } | { result: "cancel"; }>',parameters:[],references:{Promise:{location:"global"},Record:{location:"global"}},return:'Promise<{ result: "confirm"; formData?: Record<string, string>; } | { result: "cancel"; }>'},docs:{text:"Triggers the 'cancel' action on the modal, if it is open.",tags:[]}}}}static get elementRef(){return"element"}static get listeners(){return[{name:"keydown",method:"handleKeyDown",target:void 0,capture:!1,passive:!1}]}}