import{Component,Host,h,Prop,Event,Method,Watch}from"@stencil/core";import{getVariableValueFromDocument}from"../../globalHelpers";export class CmContext{constructor(){this.variableCache=new Map,this.theme="Light"}themeChangeHandler(){"Light"!==this.theme&&"Dark"!==this.theme&&"Automatic"!==this.theme&&console.error(`Invalid theme property "${this.theme}" set on cm-context!`),this.themeChanged.emit({theme:this._getResolvedTheme()})}async getVariableValue(name){return this.variableCache.has(name)||this.variableCache.set(name,getVariableValueFromDocument(name)),this.variableCache.get(name)}async getResolvedTheme(){return this._getResolvedTheme()}_getResolvedTheme(){let resolvedTheme;return resolvedTheme="Automatic"===this.theme?window.matchMedia("(prefers-color-scheme: light)").matches?"Light":"Dark":this.theme,resolvedTheme}componentWillLoad(){window.commonUIContext=this,window.matchMedia("(prefers-color-scheme: light)").addEventListener("change",(event=>{"Automatic"===this.theme&&(event.matches?this.themeChanged.emit({theme:"Light"}):this.themeChanged.emit({theme:"Dark"}))}))}render(){return h(Host,{style:{display:"none"}},h("slot",null))}static get is(){return"cm-context"}static get encapsulation(){return"shadow"}static get properties(){return{theme:{type:"string",mutable:!0,complexType:{original:"Theme | 'Automatic'",resolved:'"Automatic" | "Dark" | "Light"',references:{Theme:{location:"import",path:"../../globalHelpers"}}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"theme",reflect:!1,defaultValue:"'Light'"}}}static get events(){return[{method:"themeChanged",name:"themeChanged",bubbles:!0,cancelable:!0,composed:!0,docs:{tags:[],text:"Emitted when the resolved theme changes."},complexType:{original:"{ theme: Theme }",resolved:"{ theme: Theme; }",references:{Theme:{location:"import",path:"../../globalHelpers"}}}}]}static get methods(){return{getVariableValue:{complexType:{signature:"(name: string) => Promise<string>",parameters:[{tags:[],text:""}],references:{Promise:{location:"global"}},return:"Promise<string>"},docs:{text:"Returns the Value of the requested variable, caching it in the process.",tags:[]}},getResolvedTheme:{complexType:{signature:"() => Promise<Theme>",parameters:[],references:{Promise:{location:"global"},Theme:{location:"import",path:"../../globalHelpers"}},return:"Promise<Theme>"},docs:{text:'Returns the actual theme, resolving "Automatic" to an actual value.',tags:[]}}}}static get watchers(){return[{propName:"theme",methodName:"themeChangeHandler"}]}}