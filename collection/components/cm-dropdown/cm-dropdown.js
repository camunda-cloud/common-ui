import{Component,Host,h,Prop,State,Listen,Element,Method}from"@stencil/core";export class CmDropdown{constructor(){this.trigger={type:"button",label:"",appearance:"main"},this.options=[],this.shouldStayOpen=!1,this.isOpen=!1}triggerOption(option){option.isDisabled||(option.handler({preventDismissal:()=>{this.shouldStayOpen=!0}}),this.shouldStayOpen?this.shouldStayOpen=!1:(this.isOpen=!1,setTimeout((()=>{this.el.blur()}),10)))}async open(){this.isOpen=!0}async close(){this.isOpen=!1}async triggerOptionByIndex(optionGroupIndex,optionIndex){this.triggerOption(this.options[optionGroupIndex].options[optionIndex])}onBlur(){this.isOpen=!1}_renderOption(option){var _a,_b;let optionClasses={option:!0,isDangerous:null!==(_a=option.isDangerous)&&void 0!==_a&&_a,isDisabled:null!==(_b=option.isDisabled)&&void 0!==_b&&_b};return h("div",{class:optionClasses,onMouseDown:event=>{event.preventDefault()},onClick:()=>{this.triggerOption(option)}},h("div",{class:"title"},option.title),option.label)}render(){var _a;let trigger,flyout,flyoutClasses={flyout:!0,open:this.isOpen};if(this.trigger)if("label"===this.trigger.type)trigger=h("div",{class:"trigger",onClick:()=>{this.isOpen=!this.isOpen},onKeyDown:event=>{" "!==event.key&&"Enter"!==event.key||(this.isOpen=!this.isOpen)}},h("div",{class:"label",tabindex:"0"},h("div",{class:"text"},this.trigger.label),h("cm-icon",{icon:"down",ignoreTheme:!0})));else if("icon"===this.trigger.type)trigger=h("div",{class:"trigger"},h("cm-icon-button",{icon:this.trigger.icon,onCmPress:()=>{this.isOpen=!this.isOpen},ignoreTheme:!0}));else if("defaultAction"===this.trigger.type){let iconColor,buttonClasses={defaultAction:!0,[this.trigger.appearance]:!0};iconColor="primary"===this.trigger.appearance?"bright":"dark";const defaultAction=this.trigger.defaultHandler;trigger=h("div",{class:"trigger"},h("div",{class:buttonClasses},h("div",{tabindex:"0",class:{button:!0,[this.trigger.appearance]:!0},onClick:()=>{this.isOpen=!1,defaultAction()}},this.trigger.label),h("div",{class:{separator:!0,[this.trigger.appearance]:!0}}),h("div",{tabindex:"0",class:{iconButton:!0,[this.trigger.appearance]:!0},onClick:()=>{this.isOpen=!this.isOpen},onKeyDown:event=>{" "!==event.key&&"Enter"!==event.key||(this.isOpen=!this.isOpen)}},h("cm-icon",{icon:"down",color:iconColor,ignoreTheme:!0}))))}else{let iconColor,buttonClasses={button:!0,[this.trigger.appearance]:!0};iconColor="primary"===this.trigger.appearance?"bright":"dark",trigger=h("div",{class:"trigger"},h("div",{tabindex:"0",class:buttonClasses,onClick:()=>{this.isOpen=!this.isOpen},onKeyDown:event=>{" "!==event.key&&"Enter"!==event.key||(this.isOpen=!this.isOpen)}},this.trigger.label,h("cm-icon",{icon:"down",color:iconColor,ignoreTheme:!0})))}else console.error("[cm-dropdown] .trigger is not defined!");let flyoutOffset=0;"icon"===this.trigger.type&&(flyoutOffset=6);let flyoutWidth=null===(_a=this.el.shadowRoot.querySelector(".flyout"))||void 0===_a?void 0:_a.clientWidth,flyoutStyles={};if(flyoutWidth){const elementBoundingClientRect=this.el.getBoundingClientRect(),documentClientWidth=document.documentElement.clientWidth;flyoutStyles.top=`${elementBoundingClientRect.bottom+10+flyoutOffset}px`;let right=documentClientWidth-elementBoundingClientRect.right-flyoutOffset;documentClientWidth-right-flyoutWidth<0?flyoutStyles.left=`${elementBoundingClientRect.left}px`:flyoutStyles.right=`${right}px`}return flyout=h("div",{class:flyoutClasses,style:flyoutStyles},this.options.map((option=>h("div",{class:"optionGroup"},h("div",{class:"title"},option.title),option.options.map((option=>this._renderOption(option))))))),h(Host,null,h("div",{class:"container"},trigger,flyout))}static get is(){return"cm-dropdown"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["cm-dropdown.scss"]}}static get styleUrls(){return{$:["cm-dropdown.css"]}}static get properties(){return{trigger:{type:"unknown",mutable:!0,complexType:{original:"| { type: 'icon'; icon: CmIconButton['icon'] }\n\t\t| {\n\t\t\t\ttype: 'button'\n\t\t\t\tlabel: string\n\t\t\t\tappearance: 'main' | 'primary' | 'secondary'\n\t\t  }\n\t\t| {\n\t\t\t\ttype: 'defaultAction'\n\t\t\t\tlabel: string\n\t\t\t\tappearance: 'main' | 'primary' | 'secondary'\n\t\t\t\tdefaultHandler: () => void\n\t\t  }\n\t\t| { type: 'label'; label: string }",resolved:'{ type: "button"; label: string; appearance: "main" | "primary" | "secondary"; } | ({ type: "defaultAction"; label: string; appearance: "main" | "primary" | "secondary"; defaultHandler: () => void; }) | { type: "icon"; icon: "check" | "close" | "closeLarge" | "contextMenu" | "copy" | "delete" | "document" | "down" | "edit" | "email" | "external" | "help" | "hide" | "information" | "left" | "minus" | "plus" | "right" | "search" | "show" | "sort" | "stop" | "up" | "warning"; } | { type: "label"; label: string; }',references:{CmIconButton:{location:"import",path:"../cm-icon-button/cm-icon-button"}}},required:!1,optional:!1,docs:{tags:[],text:""},defaultValue:"{\n\t\ttype: 'button',\n\t\tlabel: '',\n\t\tappearance: 'main',\n\t}"},options:{type:"unknown",mutable:!0,complexType:{original:"Array<DropdownOptionGroup>",resolved:"DropdownOptionGroup[]",references:{Array:{location:"global"},DropdownOptionGroup:{location:"local"}}},required:!1,optional:!1,docs:{tags:[],text:""},defaultValue:"[]"}}}static get states(){return{shouldStayOpen:{},isOpen:{}}}static get methods(){return{open:{complexType:{signature:"() => Promise<void>",parameters:[],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Opens the Dropdown.",tags:[]}},close:{complexType:{signature:"() => Promise<void>",parameters:[],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Closes the Dropdown.",tags:[]}},triggerOptionByIndex:{complexType:{signature:"(optionGroupIndex: number, optionIndex: number) => Promise<void>",parameters:[{tags:[],text:""},{tags:[],text:""}],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Triggers an option, as if selected by the user. The Dropdown is _not_ required to be open for this to work.",tags:[]}}}}static get elementRef(){return"el"}static get listeners(){return[{name:"blur",method:"onBlur",target:void 0,capture:!1,passive:!1}]}}