import{Component,Host,h,Prop,Listen,Event,Method,Element}from"@stencil/core";export class CmRadiobutton{constructor(){this.value="",this.label="",this.helperText="",this.selected=!1,this.disabled=!1}handleKeyDown(event){" "===event.key&&(this.disabled||(this.select({triggeredBy:"User"}),event.preventDefault()))}handleClick(){this.disabled||this.select({triggeredBy:"User"})}async select(options={}){var _a;this.disabled&&!options.forceSelection||!1===this.selected&&(this.selected=!0,this.cmSelected.emit({value:this.value,triggeredBy:null!==(_a=options.triggeredBy)&&void 0!==_a?_a:"API"}))}render(){let containerClasses={container:!0,disabled:this.disabled},radiobuttonClasses={radiobutton:!0,selected:this.selected,disabled:this.disabled},tabIndex=0;return this.disabled&&(tabIndex=-1),h(Host,null,h("div",{class:containerClasses,tabindex:tabIndex},h("div",{class:radiobuttonClasses,ref:element=>this.radiobutton=element,role:"radio","aria-disabled":this.disabled}),h("div",{class:{beforeLabel:!0,empty:0===this.element.querySelectorAll("[slot='beforeLabel']").length}},h("slot",{name:"beforeLabel"})),h("label",null,this.label),h("div",{class:{afterLabel:!0,empty:0===this.element.querySelectorAll("[slot='afterLabel']").length}},h("slot",{name:"afterLabel"})),h("cm-text",{appearance:"helperText",color:"subtle"},this.helperText)))}static get is(){return"cm-radiobutton"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["cm-radiobutton.scss"]}}static get styleUrls(){return{$:["cm-radiobutton.css"]}}static get properties(){return{value:{type:"string",mutable:!0,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"value",reflect:!0,defaultValue:"''"},label:{type:"string",mutable:!0,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"label",reflect:!0,defaultValue:"''"},helperText:{type:"string",mutable:!0,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"helper-text",reflect:!0,defaultValue:"''"},selected:{type:"boolean",mutable:!0,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"selected",reflect:!1,defaultValue:"false"},disabled:{type:"boolean",mutable:!0,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"disabled",reflect:!0,defaultValue:"false"}}}static get events(){return[{method:"cmSelected",name:"cmSelected",bubbles:!0,cancelable:!0,composed:!0,docs:{tags:[],text:"Emitted whenever the selected state changes."},complexType:{original:"{\n\t\tvalue: string\n\t\ttriggeredBy: 'User' | 'API'\n\t}",resolved:'{ value: string; triggeredBy: "User" | "API"; }',references:{}}}]}static get methods(){return{select:{complexType:{signature:"(options?: { forceSelection?: boolean; triggeredBy?: 'User' | 'API'; }) => Promise<void>",parameters:[{tags:[],text:""}],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Sets the selected state to true. Respects the disabled state, unless forced.",tags:[]}}}}static get elementRef(){return"element"}static get listeners(){return[{name:"keydown",method:"handleKeyDown",target:void 0,capture:!1,passive:!1},{name:"click",method:"handleClick",target:void 0,capture:!1,passive:!1}]}}