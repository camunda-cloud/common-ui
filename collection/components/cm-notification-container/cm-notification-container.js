import{Component,Host,h,Method,Element}from"@stencil/core";export class CmNotificationContainer{constructor(){this.notificationQueue=[],this.notificationMap=new Map,this.visibleNotifications=[],this.durationStore=new Map,this.maxVisibleNotifications=5,this.notificationDuration=7e3}async enqueueNotification(notification){let completeNotification=Object.assign(Object.assign({},notification),{createdAt:Date.now()});return this.maxVisibleNotifications<=this.visibleNotifications.length?this.notificationQueue.push(completeNotification):this.renderNewNotification(completeNotification),{hasBeenShown:()=>!this.notificationQueue.includes(completeNotification),remove:()=>{if(this.notificationQueue.includes(completeNotification))this.notificationQueue=this.notificationQueue.filter((item=>item!==completeNotification));else{let notificationElement=this.notificationMap.get(completeNotification);notificationElement&&notificationElement.dismiss()}}}}componentDidLoad(){setInterval((()=>{this.countTimerDown(100)}),100)}async countTimerDown(expiredTime){let entries=Array.from(this.durationStore.entries());for(let[key,value]of entries)if(!document.hidden&&!await key.isBeingHovered()){let newValue=value-expiredTime;newValue<=0&&(this.durationStore.delete(key),key.dismiss()),this.durationStore.set(key,newValue)}}renderNewNotification(notification){var _a;let notificationContainer=this.el.shadowRoot.querySelector("#notificationContainer"),newNotification=document.createElement("cm-notification");this.notificationMap.set(notification,newNotification),newNotification.headline=notification.headline,newNotification.description=notification.description,newNotification.appearance=notification.appearance,newNotification.userDismissable=notification.userDismissable,newNotification.showCreationTime=notification.showCreationTime,newNotification.createdAt=notification.createdAt,null!=notification.navigation&&(newNotification.navigationLabel=notification.navigation.label,newNotification.addEventListener("cmNotificationNavigation",notification.navigation.navigationHandler)),(newNotification.userDismissable||null==newNotification.userDismissable)&&this.durationStore.set(newNotification,null!==(_a=notification.duration)&&void 0!==_a?_a:this.notificationDuration),newNotification.classList.add("hidden"),notificationContainer.appendChild(newNotification),this.visibleNotifications.push(newNotification),newNotification.addEventListener("didLoad",(()=>{newNotification.classList.remove("hidden"),notificationContainer.animate([{transform:`translateY(${newNotification.clientHeight}px)`},{transform:"translateY(0%)"}],{duration:150,easing:"linear"})})),newNotification.addEventListener("cmDismissed",(()=>{this.durationStore.delete(newNotification),requestAnimationFrame((()=>{newNotification.animate([{height:`${newNotification.clientHeight}px`},{opacity:0,height:0,padding:0}],{duration:150,easing:"linear"}).addEventListener("finish",(()=>{this.notificationMap.delete(notification),this.visibleNotifications=this.visibleNotifications.filter((item=>item!==newNotification)),newNotification.remove(),this.notificationQueue.length&&setTimeout((()=>{requestAnimationFrame((()=>{this.renderNewNotification(this.notificationQueue.shift())}))}),200)}))}))}))}render(){return h(Host,{"aria-live":"polite"},h("div",{id:"notificationContainer"}))}static get is(){return"cm-notification-container"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["cm-notification-container.scss"]}}static get styleUrls(){return{$:["cm-notification-container.css"]}}static get methods(){return{enqueueNotification:{complexType:{signature:"(notification: Omit<NotificationItem, 'createdAt'>) => Promise<{ hasBeenShown(): boolean; remove(): void; }>",parameters:[{tags:[],text:""}],references:{Promise:{location:"global"},Omit:{location:"global"},NotificationItem:{location:"local"}},return:"Promise<{ hasBeenShown(): boolean; remove(): void; }>"},docs:{text:"Queues a Notification to be shown. The notification might be shown instantly, if there is space, or later, once space is available.",tags:[]}}}}static get elementRef(){return"el"}}