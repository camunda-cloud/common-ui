import{Component,Host,h,Prop,Element,Event}from"@stencil/core";import{Method,State}from"@stencil/core/internal";import{onThemeChange}from"../../../globalHelpers";export class CmNotification{constructor(){this.appearance="info",this.description="",this.navigationLabel="",this.userDismissable=!0,this.showCreationTime=!0,this.createdAt=Date.now(),this.elapsedTime=0,this.iconColor="medium",this.theme="Light",this._isBeingHovered=!1}async dismiss(){this.cmDismissed.emit()}async isBeingHovered(){return this._isBeingHovered}componentWillLoad(){onThemeChange((theme=>{this.theme=theme,this.iconColor="Dark"===theme?"bright":"medium"}))}componentDidLoad(){this.el.addEventListener("mouseenter",(()=>{this._isBeingHovered=!0})),this.el.addEventListener("mouseleave",(()=>{this._isBeingHovered=!1})),this.timer=setInterval((()=>{this.elapsedTime+=1}),1e3),this.didLoad.emit()}disconnectedCallback(){clearInterval(this.timer)}render(){let timeDifferentialUnit,containerClasses={container:!0,[this.theme]:!0,isUserDismissable:this.userDismissable,hasDescription:0!==this.description.length,hasTimeOrNavigationLabel:Boolean(this.showCreationTime||this.navigationLabel)},iconClasses={icon:!0,[this.appearance]:!0},timeDifferential=-Math.trunc(Math.abs(this.createdAt-Date.now())/1e3);return timeDifferential>-60?timeDifferentialUnit="seconds":(timeDifferential=-Math.trunc(Math.abs(timeDifferential)/60),timeDifferentialUnit="minutes"),h(Host,null,h("div",{class:"shadowContainer"},h("div",{class:containerClasses,role:"alert"},h("div",{class:iconClasses}),h("div",{class:"content"},h("div",{class:"headline"},this.headline),h("div",{class:"description"},this.description)),this.userDismissable?h("cm-icon-button",{color:this.iconColor,ignoreTheme:!0,icon:"close",onCmPress:()=>this.dismiss()}):"",this.showCreationTime?h("div",{class:"date"},timeDifferential>-10&&"seconds"==timeDifferentialUnit?"Just now":new Intl.RelativeTimeFormat("en",{localeMatcher:"best fit",numeric:"always",style:"long"}).format(timeDifferential,timeDifferentialUnit)):"",this.navigationLabel?h("cm-button",{appearance:"link",label:this.navigationLabel,onCmPress:()=>{this.cmNotificationNavigation.emit({}),this.dismiss()}}):"")))}static get is(){return"cm-notification"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["cm-notification.scss"]}}static get styleUrls(){return{$:["cm-notification.css"]}}static get properties(){return{appearance:{type:"string",mutable:!1,complexType:{original:"'success' | 'error' | 'info'",resolved:'"error" | "info" | "success"',references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"appearance",reflect:!1,defaultValue:"'info'"},headline:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"headline",reflect:!1},description:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"description",reflect:!1,defaultValue:"''"},navigationLabel:{type:"string",mutable:!1,complexType:{original:"string",resolved:"string",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"navigation-label",reflect:!1,defaultValue:"''"},userDismissable:{type:"boolean",mutable:!1,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"user-dismissable",reflect:!1,defaultValue:"true"},showCreationTime:{type:"boolean",mutable:!1,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"show-creation-time",reflect:!1,defaultValue:"true"},createdAt:{type:"number",mutable:!1,complexType:{original:"number",resolved:"number",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"created-at",reflect:!1,defaultValue:"Date.now()"}}}static get states(){return{elapsedTime:{},iconColor:{},theme:{}}}static get events(){return[{method:"cmDismissed",name:"cmDismissed",bubbles:!0,cancelable:!0,composed:!0,docs:{tags:[],text:"Emitted when the Notification is dismissed."},complexType:{original:"{}",resolved:"{}",references:{}}},{method:"cmNotificationNavigation",name:"cmNotificationNavigation",bubbles:!0,cancelable:!0,composed:!0,docs:{tags:[],text:"Emitted when the Navigation is triggered."},complexType:{original:"{}",resolved:"{}",references:{}}},{method:"didLoad",name:"didLoad",bubbles:!0,cancelable:!0,composed:!0,docs:{tags:[],text:"Emitted when Component has loaded, used as a workaround for the lack of a general 'componentDidLoad' event internally. You should not rely on this event."},complexType:{original:"{}",resolved:"{}",references:{}}}]}static get methods(){return{dismiss:{complexType:{signature:"() => Promise<void>",parameters:[],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Dismisses the Notification.",tags:[]}},isBeingHovered:{complexType:{signature:"() => Promise<boolean>",parameters:[],references:{Promise:{location:"global"}},return:"Promise<boolean>"},docs:{text:"Returns the hover state. This is being used to halt Notification-Timeouts.",tags:[]}}}}static get elementRef(){return"el"}}