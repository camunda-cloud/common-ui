import{Component,Element,Event,Listen,Method,Host,h}from"@stencil/core";export class CmForm{keyupHandler(event){"Enter"===event.key&&this.attemptSubmit()}async attemptSubmit(){let isFormValid=!0,formData={};const textFields=Array.from(this.element.querySelectorAll("cm-textfield"));for(let textField of textFields){(await textField.checkValidity()).isValid?""!==textField.formName&&(formData[textField.formName]=textField.value):isFormValid?(textField.renderValidity(),textField.forceFocus(),isFormValid=!1):textField.hideValidity()}const checkboxes=Array.from(this.element.querySelectorAll("cm-checkbox"));for(let checkbox of checkboxes){(await checkbox.checkValidity()).isValid?""!==checkbox.formName&&(formData[checkbox.formName]=checkbox.checked):isFormValid?(checkbox.renderValidity(),checkbox.forceFocus(),isFormValid=!1):checkbox.hideValidity()}const radiobuttonGroups=Array.from(this.element.querySelectorAll("cm-radiobutton-group"));for(let radiobuttonGroup of radiobuttonGroups)""!==radiobuttonGroup.formName&&(formData[radiobuttonGroup.formName]=radiobuttonGroup.value);let result;return isFormValid?(this.cmSubmit.emit({data:formData}),result={isValid:!0,data:formData}):result={isValid:!1},result}async reset(){const textFields=Array.from(this.element.querySelectorAll("cm-textfield"));for(let textField of textFields)textField.reset();const checkboxes=Array.from(this.element.querySelectorAll("cm-checkbox"));for(let checkbox of checkboxes)checkbox.reset()}async forceFocus(){var _a;null===(_a=this.element.querySelector("cm-textfield:not([disabled]), cm-checkbox:not([disabled])"))||void 0===_a||_a.forceFocus()}render(){return h(Host,null,h("slot",null))}static get is(){return"cm-form"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["cm-form.scss"]}}static get styleUrls(){return{$:["cm-form.css"]}}static get events(){return[{method:"cmSubmit",name:"cmSubmit",bubbles:!0,cancelable:!0,composed:!0,docs:{tags:[],text:""},complexType:{original:"{ data: Record<string, string> }",resolved:"{ data: Record<string, string>; }",references:{Record:{location:"global"}}}}]}static get methods(){return{attemptSubmit:{complexType:{signature:"() => Promise<{ isValid: true; data: Record<string, string>; } | { isValid: false; }>",parameters:[],references:{Promise:{location:"global"},Record:{location:"global"}},return:"Promise<{ isValid: true; data: Record<string, string>; } | { isValid: false; }>"},docs:{text:"",tags:[]}},reset:{complexType:{signature:"() => Promise<void>",parameters:[],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"",tags:[]}},forceFocus:{complexType:{signature:"() => Promise<void>",parameters:[],references:{Promise:{location:"global"},HTMLCmTextfieldElement:{location:"global"},HTMLCmCheckboxElement:{location:"global"}},return:"Promise<void>"},docs:{text:"",tags:[]}}}}static get elementRef(){return"element"}static get listeners(){return[{name:"keyup",method:"keyupHandler",target:void 0,capture:!1,passive:!1}]}}