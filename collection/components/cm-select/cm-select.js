import{Component,Host,h,Prop,Event,Element,Method}from"@stencil/core";export class CmSelect{constructor(){this.disabled=!1,this.options=[]}async selectOptionByIndex(options){if(!this.disabled||options.forceSelection){this.element.shadowRoot.querySelector("select").selectedIndex=options.selectedIndex}}inputHandler(event){let select=event.target;this.cmInput.emit({newValue:select.options[select.selectedIndex].value})}render(){let classes={disabled:this.disabled},renderedOptions=[];for(let option of this.options)renderedOptions.push(h("option",{value:option.value},option.label));return h(Host,null,h("div",{class:classes},h("select",{onInput:this.inputHandler.bind(this)},renderedOptions)))}static get is(){return"cm-select"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["cm-select.scss"]}}static get styleUrls(){return{$:["cm-select.css"]}}static get properties(){return{disabled:{type:"boolean",mutable:!0,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!1,docs:{tags:[],text:""},attribute:"disabled",reflect:!1,defaultValue:"false"},options:{type:"unknown",mutable:!0,complexType:{original:"Array<{\n\t\tlabel: string\n\t\tvalue: string\n\t}>",resolved:"{ label: string; value: string; }[]",references:{Array:{location:"global"}}},required:!1,optional:!1,docs:{tags:[],text:""},defaultValue:"[]"}}}static get events(){return[{method:"cmInput",name:"cmInput",bubbles:!0,cancelable:!0,composed:!0,docs:{tags:[],text:"Emitted when the selected Option changes."},complexType:{original:"{ newValue: string }",resolved:"{ newValue: string; }",references:{}}}]}static get methods(){return{selectOptionByIndex:{complexType:{signature:"(options: { forceSelection?: boolean; selectedIndex: number; }) => Promise<void>",parameters:[{tags:[],text:""}],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Selects an option based on the passed index. Respects the disabled state unless forced.",tags:[]}}}}static get elementRef(){return"element"}}