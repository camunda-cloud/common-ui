/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { State } from "./components/cm-page/cm-page";
export namespace Components {
    interface CmButton {
        "appearance": 'main' | 'primary' | 'secondary' | 'danger';
        "disabled": boolean;
        "label": string;
    }
    interface CmFooter {
        "text": string;
    }
    interface CmHeader {
    }
    interface CmLink {
        "href": string;
        "label": string;
        "openIn": 'sameTab' | 'newTab';
    }
    interface CmLogo {
    }
    interface CmModal {
        "headline": string;
        "open": () => Promise<"confirm" | "cancel">;
    }
    interface CmPage {
        "activeLabel": string;
        /**
          * Returns the currently active tab, handle, and title.
         */
        "getActiveState": () => Promise<State>;
        /**
          * Switches to a tab.
          * @param label Title of the target tab.
         */
        "switchToTab": (label: string) => Promise<void>;
        /**
          * Switches to a tab.
          * @param index Index of the target tab.
         */
        "switchToTabIndex": (index: number) => Promise<void>;
    }
    interface CmPageTab {
        "active": boolean;
        "label": string;
    }
    interface CmPageTabHandle {
        "active": boolean;
        "label": string;
    }
    interface CmText {
    }
}
declare global {
    interface HTMLCmButtonElement extends Components.CmButton, HTMLStencilElement {
    }
    var HTMLCmButtonElement: {
        prototype: HTMLCmButtonElement;
        new (): HTMLCmButtonElement;
    };
    interface HTMLCmFooterElement extends Components.CmFooter, HTMLStencilElement {
    }
    var HTMLCmFooterElement: {
        prototype: HTMLCmFooterElement;
        new (): HTMLCmFooterElement;
    };
    interface HTMLCmHeaderElement extends Components.CmHeader, HTMLStencilElement {
    }
    var HTMLCmHeaderElement: {
        prototype: HTMLCmHeaderElement;
        new (): HTMLCmHeaderElement;
    };
    interface HTMLCmLinkElement extends Components.CmLink, HTMLStencilElement {
    }
    var HTMLCmLinkElement: {
        prototype: HTMLCmLinkElement;
        new (): HTMLCmLinkElement;
    };
    interface HTMLCmLogoElement extends Components.CmLogo, HTMLStencilElement {
    }
    var HTMLCmLogoElement: {
        prototype: HTMLCmLogoElement;
        new (): HTMLCmLogoElement;
    };
    interface HTMLCmModalElement extends Components.CmModal, HTMLStencilElement {
    }
    var HTMLCmModalElement: {
        prototype: HTMLCmModalElement;
        new (): HTMLCmModalElement;
    };
    interface HTMLCmPageElement extends Components.CmPage, HTMLStencilElement {
    }
    var HTMLCmPageElement: {
        prototype: HTMLCmPageElement;
        new (): HTMLCmPageElement;
    };
    interface HTMLCmPageTabElement extends Components.CmPageTab, HTMLStencilElement {
    }
    var HTMLCmPageTabElement: {
        prototype: HTMLCmPageTabElement;
        new (): HTMLCmPageTabElement;
    };
    interface HTMLCmPageTabHandleElement extends Components.CmPageTabHandle, HTMLStencilElement {
    }
    var HTMLCmPageTabHandleElement: {
        prototype: HTMLCmPageTabHandleElement;
        new (): HTMLCmPageTabHandleElement;
    };
    interface HTMLCmTextElement extends Components.CmText, HTMLStencilElement {
    }
    var HTMLCmTextElement: {
        prototype: HTMLCmTextElement;
        new (): HTMLCmTextElement;
    };
    interface HTMLElementTagNameMap {
        "cm-button": HTMLCmButtonElement;
        "cm-footer": HTMLCmFooterElement;
        "cm-header": HTMLCmHeaderElement;
        "cm-link": HTMLCmLinkElement;
        "cm-logo": HTMLCmLogoElement;
        "cm-modal": HTMLCmModalElement;
        "cm-page": HTMLCmPageElement;
        "cm-page-tab": HTMLCmPageTabElement;
        "cm-page-tab-handle": HTMLCmPageTabHandleElement;
        "cm-text": HTMLCmTextElement;
    }
}
declare namespace LocalJSX {
    interface CmButton {
        "appearance"?: 'main' | 'primary' | 'secondary' | 'danger';
        "disabled"?: boolean;
        "label"?: string;
        "onCmPress"?: (event: CustomEvent<{}>) => void;
    }
    interface CmFooter {
        "text"?: string;
    }
    interface CmHeader {
    }
    interface CmLink {
        "href"?: string;
        "label"?: string;
        "openIn"?: 'sameTab' | 'newTab';
    }
    interface CmLogo {
    }
    interface CmModal {
        "headline"?: string;
    }
    interface CmPage {
        "activeLabel"?: string;
        /**
          * This is emitted when we switch to another tab.
         */
        "onTabChanged"?: (event: CustomEvent<State>) => void;
    }
    interface CmPageTab {
        "active"?: boolean;
        "label"?: string;
        "onTabModified"?: (event: CustomEvent<any>) => void;
    }
    interface CmPageTabHandle {
        "active"?: boolean;
        "label"?: string;
        "onUserSelectedTab"?: (event: CustomEvent<{
		originalEvent: MouseEvent | KeyboardEvent
		handle: HTMLCmPageTabHandleElement
		label: string
	}>) => void;
    }
    interface CmText {
    }
    interface IntrinsicElements {
        "cm-button": CmButton;
        "cm-footer": CmFooter;
        "cm-header": CmHeader;
        "cm-link": CmLink;
        "cm-logo": CmLogo;
        "cm-modal": CmModal;
        "cm-page": CmPage;
        "cm-page-tab": CmPageTab;
        "cm-page-tab-handle": CmPageTabHandle;
        "cm-text": CmText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cm-button": LocalJSX.CmButton & JSXBase.HTMLAttributes<HTMLCmButtonElement>;
            "cm-footer": LocalJSX.CmFooter & JSXBase.HTMLAttributes<HTMLCmFooterElement>;
            "cm-header": LocalJSX.CmHeader & JSXBase.HTMLAttributes<HTMLCmHeaderElement>;
            "cm-link": LocalJSX.CmLink & JSXBase.HTMLAttributes<HTMLCmLinkElement>;
            "cm-logo": LocalJSX.CmLogo & JSXBase.HTMLAttributes<HTMLCmLogoElement>;
            "cm-modal": LocalJSX.CmModal & JSXBase.HTMLAttributes<HTMLCmModalElement>;
            "cm-page": LocalJSX.CmPage & JSXBase.HTMLAttributes<HTMLCmPageElement>;
            "cm-page-tab": LocalJSX.CmPageTab & JSXBase.HTMLAttributes<HTMLCmPageTabElement>;
            "cm-page-tab-handle": LocalJSX.CmPageTabHandle & JSXBase.HTMLAttributes<HTMLCmPageTabHandleElement>;
            "cm-text": LocalJSX.CmText & JSXBase.HTMLAttributes<HTMLCmTextElement>;
        }
    }
}
